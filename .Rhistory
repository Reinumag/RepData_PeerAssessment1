barplot(forest1$confusion[,7],main="Training set",
xlab="Activity",ylab="Classification error", col="green")
confusionMatrix(forestpred1,Test$activity)
summary(cM)
cM<-confusionMatrix(forestpred1,Test$activity)
summary(cM)
cM$table
cM$byclass
cM$byClass
cM$byClass[,1]
barplot(1-cM$byClass[,1],main="Test set",
xlab="Activity",ylab="Classification error", col="red")
?barplot
bars<-rbind(forest1$confusion[,7],1-cM$byClass[,1]) # teen maatriksi
bars
barplot(forest1$confusion[,7],main="Training set",
xlab="Activity",ylab="Classification error", col="green", ylim=c(0,0.12))
barplot(1-cM$byClass[,1],main="Test set",
xlab="Activity",ylab="Classification error", col="red",ylim=c(0,0.12))
par(mfrow=c(1,2))
barplot(forest1$confusion[,7],main="Training set",
xlab="Activity",ylab="Classification error", col="green", ylim=c(0,0.12))
barplot(1-cM$byClass[,1],main="Test set",
xlab="Activity",ylab="Classification error", col="red",ylim=c(0,0.12))
par(mfrow=c(1,2))
barplot(forest1$confusion[,7],main="Training set",
xlab="Activity",ylab="Classification error", col="green", ylim=c(0,0.15))
barplot(1-cM$byClass[,1],main="Test set",
xlab="Activity",ylab="Classification error", col="red",ylim=c(0,0.15))
par(mfrow=c(2,1))
barplot(forest1$confusion[,7],main="Training set",
xlab="Activity",ylab="Classification error", col="green", ylim=c(0,0.18))
barplot(1-cM$byClass[,1],main="Test set",
xlab="Activity",ylab="Classification error", col="red",ylim=c(0,0.18))
par(mfrow=c(1,2))
barplot(forest1$confusion[,7],main="Training set",
xlab="Activity",ylab="Classification error", col="green", ylim=c(0,0.18))
barplot(1-cM$byClass[,1],main="Test set",
xlab="Activity",ylab="Classification error", col="red",ylim=c(0,0.18))
par(mfrow=c(1,1))
barplot(bars,main="Classification errors",
xlab="Activity",ylab="Error rate", col=("green","red"), ylim=c(0,0.18))
barplot(bars,main="Classification errors",
xlab="Activity",ylab="Error rate", col=("green","red"), ylim=c(0,0.18))
barplot(bars,main="Classification errors",
xlab="Activity",ylab="Error rate", col=(1,2), ylim=c(0,0.18))
barplot(bars,main="Classification errors",
xlab="Activity",ylab="Error rate", col<-(1,2), ylim=c(0,0.18))
barplot(bars,main="Classification errors",
xlab="Activity",ylab="Error rate", col="green", ylim=c(0,0.18))
barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col="green", ylim=c(0,0.18))
text(bars, labels = format(bars, 4),pos = 3, cex = .75)
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col="green", ylim=c(0,0.18))
text(mp,bars, labels = format(bars, 4),pos = 3, cex = .75)
mp
?format
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col="green", ylim=c(0,0.18))
text(mp,bars, labels = format(bars, 4, digits=3),pos = 3, cex = .75)
text(mp,bars, labels = format(bars, 4, digits=2),pos = 3, cex = .75)
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col="green", ylim=c(0,0.18))
text(mp,bars, labels = format(bars, 4, digits=2),pos = 3, cex = .75)
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col="green", ylim=c(0,0.18))
text(mp,bars, labels = format(bars, 4, digits=1),pos = 3, cex = .75)
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col="green", ylim=c(0,0.18))
text(mp,bars, labels = format(bars, 4, digits=1),pos = 2, cex = .75)
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col="green", ylim=c(0,0.18))
text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col="green", ylim=c(0,0.18))
text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col="green", ylim=c(0,0.18))
text(mp,bars, labels = format(bars, 4, digits=1),pos = 3, cex = .75)
text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
?format
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col=c("green", "blue"), ylim=c(0,0.18))
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.18))
text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
?legend
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.18))
#text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
legend(750,25,legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
legend(10,25,legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
legend(10,10,legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))
#text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
legend(10,10,legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
legend(100,100,legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
legend(0.1,legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
legend(0.2,legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))
legend(0.2,legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
?barplot
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0%,20%))
?axis
?format
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0%,20%))
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))
#text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
legend(0.2,legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
axis(2, axTicks(2), format(axTicks(2), scientific = F))
?legend
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))
#text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
legend(0.2,border="white",legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
legend(0.2,border=NULL,legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))
#text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
legend(0.2,border=NULL,legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Classification errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))
#text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
legend(0.2,border="",legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
axis(2, axTicks(2), format(axTicks(2), scientific = F))
par(mfrow=c(1,2))
mp<-barplot(bars,beside = TRUE,main="Type I errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))
#text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
legend(0.2,border="",legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
#axis(2, axTicks(2), format(axTicks(2), scientific = F))
#mp
mp1<-barplot(bars1,beside = TRUE,main="Type II errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))
mp1<-barplot(bars,beside = TRUE,main="Type II errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))
#text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
legend(0.2,border="",legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
summary(cM)
cM
forest1
forestpred1 <- predict(forest1,Test, type="class")
forestpred1
summary(forestpred1)
forest1
forest1$confusion
summary(forest1)
forest1
summary(Train$activiy)
summary(Train$activity)
forest1$err.rate
for i=1:6{TrainColumnSums[i]<-sum(forest1$confusion[,i])}
?for
for (i in 1:6){TrainColumnSums[i]<-sum(forest1$confusion[,i])}
for (i in 1:6){TrainColumnSums[i]<-sum(forest1$confusion[,i])}
TraincolumnSums<-1:6
for (i in 1:6){TrainColumnSums[i]<-sum(forest1$confusion[,i])}
?sum
sum(forest1$confusion[,2])
for (i in 1:6){TrainColumnSums[i]<-sum(forest1$confusion[,i])}
TrainColumnSums<-1:6
for (i in 1:6){TrainColumnSums[i]<-sum(forest1$confusion[,i])}
TrainColumnSums
TrCS<-1:6
for (i in 1:6){TrCS[i]<-sum(forest1$confusion[,i])}
TrCS
for (i in 1:6){TrainTypeII[i]<-(TrCS[i]-forest1$confusion[i,i])/TrCS[i]}
TrainTypeII<-1:6
for (i in 1:6){TrainTypeII[i]<-(TrCS[i]-forest1$confusion[i,i])/TrCS[i]}
TrainTypeII
cm
cM
summary(cM)
cM$byClass
cM$byClass[3,]
cM$byClass[,3]
TrainTypeII<-1-cM$byClass[,3]
bars1<-rbind(TrainTypeII,1-cM$byClass[,3]) # teen maatriksi
bars1
TrainTypeII
cM
forest1$confusion
TrainTypeII
TrCS
TrCS<-1:6
for (i in 1:6){TrCS[i]<-sum(forest1$confusion[,i])}
TrCS
TrainTypeII<-1:6
for (i in 1:6){TrainTypeII[i]<-(TrCS[i]-forest1$confusion[i,i])/TrCS[i]}
TrainTypeII
bars1
bars1[1,]
bars1[2,]
bars1<-rbind(1-cM$byClass[,3],1-cM$byClass[,3]) # teen maatriksi
bars1
bars[1,]<-TrainTypeII
bars1
TrainTypeII
bars[1,]<-TrainTypeII
bars1
bars1<-rbind(1-cM$byClass[,3],TrainTypeII) # teen maatriksi
bars1
mp1<-barplot(bars1,beside = TRUE,main="Type II errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))
#text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
legend(0.2,border="",legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
bars1<-rbind(TrainTypeII,1-cM$byClass[,3]) # teen maatriksi
#bars[1,]<-TrainTypeII
mp1<-barplot(bars1,beside = TRUE,main="Type II errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))
par(mfrow=c(1,2))
mp<-barplot(bars,beside = TRUE,main="Type I errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))  # see on Ok
#text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
legend(0.2,border="",legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
legend(0.2,2,border="",legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
bars1<-rbind(TrainTypeII,1-cM$byClass[,3]) # teen maatriksi
#bars[1,]<-TrainTypeII
mp1<-barplot(bars1,beside = TRUE,main="Type II errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))
#text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
legend(0.2,border="",legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
par(mfrow=c(1,1))
mp<-barplot(bars,beside = TRUE,main="Type I errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"), ylim=c(0,0.2))  # see on Ok
legend(0.2,2,border="",legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
legend(0.2,border="",legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
mp1<-barplot(bars1,beside = TRUE,main="Type II errors",
xlab="Activity",ylab="Error rate", col=c("green", "red"),
names.arg=c("laying", "sitting","standing", "walk","walkdown","walkup"), ylim=c(0,0.2))
#text(mp,bars, labels = format(bars, 4, digits=0),pos = 3, cex = .75)
legend(0.2,border="",legend=c("Training","Testing"),col=c("green","red"),pch=c(19,19))
summary(forestpred1)
forestpred1
forestpred1$err.rate
summary(forest1)
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
sum(pValues < 0.1) # alpha=0.1
alpha<-0.1
sum(pValues < alpha) # alpha=0.1
sum(p.adjust(pValues,method="bonferroni") < alpha)
sum(p.adjust(pValues,method="BH") < alpha)
?rlm
library(MASS)
?rlm
updateR()
source('~/R projektid/KML/KML.R')
Away
Home
MänguUrl <-"http://www.lkl.lt/rungtynes/20130401/neptunas-zalgiris/play-by-play/7"
TabeliXPath<-"//table[1]//table[1]"
HTMLPuu <- htmlTreeParse(MänguUrl, error=function(...){}, useInternalNodes = TRUE,encoding='UTF-8')
HTMLPuu <- htmlTreeParse(MänguUrl, error=function(...){}, useInternalNodes = TRUE,encoding='UTF-8')
HTMLPuu
fix(HTMLPuu)
HTMLPuu
HTMLPuu <- htmlTreeParse(MänguUrl, error=function(...){}, useInternalNodes = TRUE) #,encoding='UTF-8')
HTMLPuu
HTMLPuu <- htmlTreeParse(MänguUrl, error=function(...){}, useInternalNodes = TRUE,encoding='win-1257')
HTMLPuu #on pms hulk html koodi
?getNodeSet
fix(HTMLPuu)
HTMLPuu #on pms hulk html koodi
HTMLPuu #on pms hulk html koodi
HTMLPuu <- htmlTreeParse(MänguUrl, error=function(...){}, useInternalNodes = TRUE,encoding='win-1257')
library(XML)
MänguUrl <-"http://www.lkl.lt/rungtynes/20130401/neptunas-zalgiris/play-by-play/7"
TabeliXPath<-"//table[1]//table[1]"
HTMLPuu <- htmlTreeParse(MänguUrl, error=function(...){}, useInternalNodes = TRUE,encoding='win-1257')
HTMLPuu #on pms hulk html koodi
TabeliXPath<-"" #"//table[1]//table[1]"
HTMLPuu <- htmlTreeParse(MänguUrl, error=function(...){}, useInternalNodes = TRUE,encoding='win-1257')
HTMLPuu #on pms hulk html koodi
TabeliPuu <- getNodeSet(HTMLPuu,TabeliXPath )
HTMLJuurikas<-xmlRoot(HTMLPuu)
HTMLJuurikas
summary(HTMLJuurikas)
MänguUrl <-"http://www.lkl.lt/rungtynes/20130401/neptunas-zalgiris/play-by-play/7"
TabeliXPath<-//*[@id="tabPane1"] #"//table[1]//table[1]"
HTMLPuu <- htmlTreeParse(MänguUrl, error=function(...){}, useInternalNodes = TRUE,encoding='win-1257')
library(XML)
MänguUrl <-"http://www.lkl.lt/rungtynes/20130401/neptunas-zalgiris/play-by-play/7"
TabeliXPath<-//*[@id="tabPane1"] #"//table[1]//table[1]"
TabeliXPath<-"//*[@id="tabPane1"]" #"//table[1]//table[1]"
HTMLPuu <- htmlTreeParse(MänguUrl, error=function(...){}, useInternalNodes = TRUE,encoding='win-1257')
HTMLPuu #on pms hulk html koodi
TabeliXPath<-"//*[@id="tabPane1"]" #"//table[1]//table[1]"
TabeliXPath<-'//*[@id="tabPane1"]' #"//table[1]//table[1]"
HTMLPuu <- htmlTreeParse(MänguUrl, error=function(...){}, useInternalNodes = TRUE,encoding='win-1257')
HTMLPuu #on pms hulk html koodi
TabeliPuu <- getNodeSet(HTMLPuu,TabeliXPath )
Tabelipuu  # ka see on pms hulk html koodi. ei tundu erilist vahet eelmisega
TabeliPuu  # ka see on pms hulk html koodi. ei tundu erilist vahet eelmisega
HTML<-htmlParse(MänguUrl, encoding = "UTF-8")
HTML
HTML<-htmlParse(MänguUrl, encoding = "UTF-8")
getEncoding(HTML)
HTML<-htmlParse(MänguUrl)
getEncoding(HTML)
MänguUrl <-"http://www.lkl.lt/rungtynes/20130401/neptunas-zalgiris/play-by-play/7"
TabeliXPath<-'//*[@id="tabPane1"]' #"//table[1]//table[1]"
HTMLPuu <- htmlTreeParse(MänguUrl, error=function(...){}, useInternalNodes = TRUE,encoding='UTF-8')
HTML<-htmlParse(MänguUrl)
getEncoding(HTML)
TabeliPuu <- getNodeSet(HTMLPuu,TabeliXPath )
TabeliPuu  # ka see on pms hulk html koodi. ei tundu erilist vahet eelmisega
TabeliPuu[1]
summary(TabeliPuu)
summary(HTMLPuu)
fix(TabeliPuu)
fix(TabeliPuu)
TabeliPuu
TabeliXPath2<-"/html/body/div/div[2]/div[2]/div[2]/div[3]/div[2]/div/div/div[2]/table/tbody"
HTMLPuu <- htmlTreeParse(MänguUrl, error=function(...){}, useInternalNodes = TRUE,encoding='UTF-8')
library(XML)
HTMLPuu <- htmlTreeParse(MänguUrl, error=function(...){}, useInternalNodes = TRUE,encoding='UTF-8')
TabeliPuu <- getNodeSet(HTMLPuu,TabeliXPath )
TabeliPuu  # ka see on pms hulk html koodi. ei tundu erilist vahet eelmisega
summary(TabeliPuu)
summary(HTMLPuu)
Skoor <- readHTMLTable(TabeliPuu[[1]])
Skoor
Skoor <- readHTMLTable(TabeliPuu[[2]])
Skoor
Skoor <- readHTMLTable(TabeliPuu[[2]])
head(TabeliPuu)  # ka see on pms hulk html koodi. ei tundu erilist vahet eelmisega
HTMLPuu
TabeliPuu
Skoor
head(Skoor)
View(Skoor)
View(Skoor)
View(Skoor)
source('~/Coursera/DS Specialization/R Programming/Assignments/ProgrammingAssignment2/cachematrix.R')
testMatrix <- matrix(1:9)
drop testMatrix
rm testMatrix
drop(testMatrix)
rm(testMatrix)
testMatrix <- matrix(1:9, nrows=3)
testMatrix <- matrix(1:9, nrow=3)
testMatix
testMatrix
inverseMatrix <- solve(testMatrix)
testMatrix <- matrix(1:3, nrow=3, ncol=3)
testMatrix
inverseMatrix <- solve(testMatrix)
testMatrix <- matrix(1:4, nrow=3, ncol=3)
testMatrix[2,2]<-5
testMatrix
inverseMatrix <- solve(testMatrix)
inverseMatrix
makeCacheMatrix(testMatrix)
source('~/.active-rstudio-document')
makeCacheMatrix(testMatrix)
source('~/.active-rstudio-document')
makeCacheMatrix(testMatrix)
cacheSolve(testMatrix)
object <- makeCacheMatrix(testMatrix)
cacheSolve(object)
str(object)
source('~/.active-rstudio-document')
install_from_swirl("R Programming")
install_from_swirl("R Programming")
swirl()
install_from_swirl("R Programming")
path.package("swirl")
file.path(path.package("swirl"), "Courses")
install_from_swirl("R Programming")
R.version.string
uptadeR()
install.packages("installr")
updateR()
updateR()
require(installr)
updateR()
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4)+c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
1:20
pi:10
15:1
?':'
seq(1:20)
seq(1,20)
seq(0,10, by=0.5)
seq(5,10,length=30)
my_seq <-
| seq(5, 10, length=30)
my_sec <- seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq
seq_along(my_seq)
rep(0,times=40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5,55,-10,6)
nv1 <- num_vect[num_vect<1]
a <- num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Reinumag")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
0
0
exit
exi()
exit()
quit()
library(datasets)
data(iris)
?iris
str(iris)
summary(iris$species)
table(iris$Species)
summary(iris$Species)
head(iris)
summary(iris$Species[virginica])
mean(iris$Sepal.Length[iris$Species=="virginica"])
library(datasets)
data(mtcars)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
View(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
hps <- sapply(split(mtcars$hp, mtcars$cyl), mean)
hps[3]-hps[1]
debug(ls)
debug(ls)
ls()
3
set.seed(1)
rpois(5, 2)
?dpois
exit
quit
unzip("activity.zip")
getwd()
wd <- "C:/Users/Madis/Documents/Coursera/DS Specialization/5. Reproducible Research/RepData_PeerAssessment1"
setwd(wd)
unzip("activity.zip")
?unzip
input <-read.csv("activity.csv")
head(input)
tail(input)
str(input)
summary(input)
meansteps <- mean(input$steps, na.rm = TRUE)
h <- hist(input$steps)
